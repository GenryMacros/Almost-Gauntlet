(defun get-var ()
  (let ((average 0) (sum 0))
  (cl-csv:do-csv (row #P"/home/light_frosted/Documents/HY/Random_prediction_results.csv")
    (incf average (parse-integer (nth 7 row))))
  (setq average (/ average 100))
  (cl-csv:do-csv (row #P"/home/light_frosted/Documents/HY/Random_prediction_results.csv")
    (let ((temp 0))
      (setq temp (parse-integer (nth 7 row)))
      (setq temp (- temp average))
      (setq temp (expt temp 2))
      (incf sum temp)

    )
  )
  (setq sum (/ sum 100))
  (float sum)

  )
)

(defun get-exp()
  (let ((sum 0))
    (cl-csv:do-csv (row #P"/home/light_frosted/Documents/HY/Random_prediction_results.csv")
      (let ((ncount 0) (curnum 0) (tempnum 0))
        (with-input-from-string (in (nth 6 row))
         (setq curnum (read in)))
        (cl-csv:do-csv (row #P"/home/light_frosted/Documents/HY/Random_prediction_results.csv")
         (with-input-from-string (in (nth 6 row))
          (setq tempnum (read in)))
         (if (and (< (- tempnum 0.001) curnum) (> (+ tempnum 0.001) curnum))
          (incf ncount 1)
          ())
        )
        (setq ncount (/ ncount 100))
        (incf sum (* ncount curnum))   
      )
    )
    (float sum)
  )
)
